Parameters:
  GITSHA:
    Type: String

Resources:
# aws cloudformation update-stack describe-stacks --template-body file://user.yaml --stack-name cloudFormation-userStack-dev  --profile default
# aws cloudformation create-stack --template-body file://user.yaml --stack-name cloudFormation-userStack-dev --profile default --capabilities CAPABILITY_IAM
  UserSQS:
    Type: AWS::SQS::Queue
    Properties:
      DelaySeconds: 0
      QueueName: cloudFormation-userQueue
  # UserS3:
  #   Type: AWS::S3::Bucket
  #   Properties:
  #     BucketName: user-s3-dev
  UserIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
        # ManagedPolicyArns:
        #   - arn:aws:iam::aws:policy/service role/AWSLambdaBasicExecutionRole
      Path: /
      Policies:
        - PolicyName: allowUserLambdaLogs
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - 's3:*'
                Resource: '*'
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: 'arn:aws:logs:*:*:*'
        - PolicyName: allowUserSqs
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - sqs:ReceiveMessage
                  - sqs:DeleteMessage
                  - sqs:GetQueueAttributes
                  - sqs:ChangeMessageVisibility
                Resource: !GetAtt UserSQS.Arn

  UserLambda:
    Type: AWS::Lambda::Function
    Properties:
      Description: First Example Sangmean
      # Handler: s3Upload.handler
      # Runtime: nodejs14.x
      PackageType: Image
      ImageConfig:
        Command:
          - /app/src/services/user/s3Upload.handler
      Code:
        ImageUri: !Sub 418329235064.dkr.ecr.us-east-1.amazonaws.com/restaurant-test:${GITSHA}
        # S3Bucket: cloudformation-users3-dev
        # S3Key: 'sangmeanTest'
      Role: !GetAtt 'UserIAMRole.Arn'
      FunctionName: "cloudFormation-userTesting2"

  # UserLambda:
  #   Type: AWS::Lambda::Function
  #   Properties:
  #     Description: First Example Sangmean
  #     # Handler: s3Upload.handler
  #     # Runtime: nodejs14.x
  #     PackageType: Image
  #     ImageConfig:
  #       Command:
  #         - /app/src/services/user/1234.handler
  #     Code:
  #       ImageUri: !Sub 418329235064.dkr.ecr.us-east-1.amazonaws.com/restaurant-test:${GITSHA}
  #       # S3Bucket: cloudformation-users3-dev
  #       # S3Key: 'sangmeanTest'
  #     Role: !GetAtt 'UserIAMRole.Arn'
  #     FunctionName: "cloudFormation-userTesting3"

  UserLambdaFunctionEventSourceMapping:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt UserSQS.Arn
      FunctionName: !GetAtt UserLambda.Arn

  UserDynamoDB:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: cloudFormation-userDB
      KeySchema:
        - AttributeName: id 
          KeyType: HASH
        - AttributeName: name
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: name
          AttributeType: S
      # BillingMode: PROVISIONED 이건 설정하지 않으면 default이다. 
      # BillingMode 가 PROVISIONED로 설정이 되게 되면 무조건 ProvisionedThroughput을 설정해야한다. 즉 BillingMode를 PAY_PER_REQUEST로 하면 ProvisionedThroughput을 지정하지 않아도 된다.
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5


  # UserEventMapping:
  #   Type: AWS::SQS::EventSourceMapping

# after create S3 Bucket, I added .zip file using AWS CLI
#  - aws s3api put-object --bucket user-s3-dev --body ./src/services/user/s3Upload.zip --key sangmeanTest  ==> add object into s3 bucket.
#  after that I wrote Lambda cloudformation then run the code below
#  - aws cloudformation deploy --template-file ./cloudformation/user.yaml --stack-name cloudFormation-userStack-dev  --capabilities CAPABILITY_IAM
# check Stack logs
#  - aws cloudformation describe-stack-events --stack-name ucloudFormation-userStack-dev
# delete Stack
#  - aws cloudformation delete-stack --stack-name cloudFormation-userStack-dev 